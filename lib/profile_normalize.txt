Function: normalize at line 52

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    52                                           def normalize(board):
    53                                               """
    54                                                   Apply all 32 positional trasformations
    55                                               """
    56         1       2718.0   2718.0     16.9      boards = apply_transformations(board)
    57         1         12.0     12.0      0.1      """
    58                                                   Select board with the highest positional tag
    59                                               """
    60                                               #tags = positional_tag(boards)
    61         1        212.0    212.0      1.3      np_tags=np.where(boards.reshape((boards.shape[0], -1)) >= 0, 1, 0)
    62         1       1108.0   1108.0      6.9      candidatesIdx=np.where(np.sum(np_tags==np_tags[np.lexsort(np.rot90(np_tags))[-1]],axis=1)==64)
    63                                               #candidates = boards[tags == max(tags)]
    64         1         49.0     49.0      0.3      candidates=boards[candidatesIdx]
    65         1          6.0      6.0      0.0      """
    66                                                   Apply xor to the pieces, so the first piece is always 0
    67                                                   NB: xor preallocated to -1 otherwise empty cells are not preserved
    68                                               """
    69         1        175.0    175.0      1.1      xored = np.full_like(candidates, np.nan, dtype=np.int32)
    70         2        162.0     81.0      1.0      np.logical_xor(candidates, candidates[:, 0, 0].reshape(candidates.shape[0], 1, 1, 4), out=xored,
    71         1         31.0     31.0      0.2                     where=np.logical_not(np.isnan(candidates)))
    72         1          6.0      6.0      0.0      """
    73                                                   Apply all 24 bitwise permutations
    74                                               """
    75         1       3890.0   3890.0     24.3      permuted = np.array([b[:, :, p] for p in permutations for b in xored ])
    76
    77         1          5.0      5.0      0.0      """
    78                                                   Finds the highest board in lexicographic order, we define it as the normal form TM
    79                                               """
    80         1       1096.0   1096.0      6.8      normal_board = permuted[np.lexsort(np.rot90(permuted.reshape(permuted.shape[0],-1)))[0]] #min(permuted, key=lambda x: str(x))
    81         1       6567.0   6567.0     40.9      return normal_board, np.array2string(normal_board) #''.join([str(_) for _ in normal_board.flatten()])

The End